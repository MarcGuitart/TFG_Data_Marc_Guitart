services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports: [ "2181:2181" ]
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [ tfg_net ]

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports: [ "9092:9092", "29092:29092" ]
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 9092"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks: [ tfg_net ]

  influxdb:
    image: influxdb:2.7
    container_name: docker-influxdb-1
    ports: [ "8086:8086" ]
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: admin123
      DOCKER_INFLUXDB_INIT_ORG: tfg
      DOCKER_INFLUXDB_INIT_BUCKET: pipeline
      DOCKER_INFLUXDB_INIT_RETENTION: 168h
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: admin_token
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      tfg_net:
        aliases: [ influxdb ]

  window_loader:
    build:
      context: ../
      dockerfile: docker/Dockerfile.window_loader
    environment:
      - KAFKA_BROKER=kafka:9092
      - TOPIC_RAW=telemetry.raw
      - TOPIC_AGENT_IN=telemetry.agent.in
      - BATCH_SIZE=1
      - PLAY_SPEED_MS=0
    volumes:
      - ../data:/app/data
    depends_on:
      - kafka
    networks: [ tfg_net ]
    ports: [ "8083:8083" ]
    restart: always

  agent:
    build:
      context: ../
      dockerfile: docker/Dockerfile.agent
    environment:
      - KAFKA_BROKER=kafka:9092
      - TOPIC_AGENT_IN=telemetry.agent.in
      - TOPIC_AGENT_OUT=telemetry.agent.out
      - FLAVOR=inference
      - INFLUX_URL=http://influxdb:8086
      - INFLUX_TOKEN=admin_token
      - INFLUX_ORG=tfg
      - INFLUX_BUCKET=pipeline
      - MAX_ROWS_PER_UNIT=1000
      - RETENTION_HOURS=24
      - SLOT_MINUTES=30
      - MODEL_CLASS=agent.model:NaiveDailyProfileModel
      - MODEL_PATH=/app/data/model_daily.json
      - PRED_HORIZON_MIN=30
      - LEARN_LOOKBACK_DAYS=30
      - LEARN_PERIOD_SEC=86400
      - HYPERMODEL_CONFIG=/app/hypermodel/model_config.json
      - HYPERMODEL_DECAY=0.95
      - HYPERMODEL_W_CAP=10.0
      - BUFFER_LEN=32
    depends_on:
      kafka:
        condition: service_healthy
      influxdb:
        condition: service_started
    networks: [ tfg_net ]
    volumes:
      - ../data:/app/data
      - ../hypermodel:/app/hypermodel
    ports:
      - "8090:8090"   # opcional (debug)
    restart: always

  window_collector:
    build:
      context: ..
      dockerfile: docker/Dockerfile.window_collector
    environment:
      - KAFKA_BROKER=kafka:9092
      - TOPIC_AGENT_OUT=telemetry.agent.out
      - DEDUP_KEY=timestamp,id
      - INFLUX_URL=http://influxdb:8086
      - INFLUX_TOKEN=admin_token
      - INFLUX_ORG=tfg
      - INFLUX_BUCKET=pipeline
    ports: [ "8082:8082" ]
    depends_on:
      - kafka
      - influxdb
    networks: [ tfg_net ]
    volumes:
      - ../data:/app/data
    restart: always

  orchestrator:
    build:
      context: ../
      dockerfile: docker/Dockerfile.orchestrator
    ports: [ "8081:8081" ]
    depends_on:
      - window_loader
      - agent
      - window_collector
    networks: [ tfg_net ]
    volumes:
      - ../data:/app/data
    environment:
      - INFLUX_URL=http://influxdb:8086
      - INFLUX_TOKEN=admin_token
      - INFLUX_ORG=tfg
      - INFLUX_BUCKET=pipeline
      - LOADER_URL=http://window_loader:8083/trigger
      - COLLECTOR_URL=http://window_collector:8082/reset
      - COLLECTOR_FLUSH=http://window_collector:8082/flush
    restart: always

volumes:
  kafka_data:
  influxdb_data:
  shared_data:
    driver: local

networks:
  tfg_net:
    name: tfg_net
    driver: bridge
